@startuml VendingMachineV2_StateMachine
!theme plain

skinparam backgroundColor #F9F9F9
skinparam state {
  BackgroundColor #E8F8E8
  BorderColor #2E8B57
  FontColor #333333
  FontSize 12
}
skinparam note {
  BackgroundColor #FFFFE0
  BorderColor #AAAAAA
  FontColor #333333
  FontSize 11
}
skinparam shadowing true

title VendingMachine DAO V2 - Machine à États des Propositions

[*] --> Draft : User creates proposal

state "Draft" as Draft {
  Draft : Proposal being prepared
  Draft : - targets, values, calldatas
  Draft : - description written
  Draft : - threshold check pending
}

Draft --> Pending : propose() called\nwith sufficient tokens

state "Pending" as Pending {
  Pending : Voting delay period
  Pending : - 1 block delay
  Pending : - snapshot taken
  Pending : - votes locked
}

Pending --> Active : Voting period starts

state "Active" as Active {
  Active : Voting in progress
  Active : - ~1 week duration
  Active : - castVote() accepted
  Active : - vote counting
}

Active --> Defeated : Voting ends\nwith failure
Active --> Succeeded : Voting ends\nwith success

state "Defeated" as Defeated {
  Defeated : Proposal rejected
  Defeated : - insufficient votes
  Defeated : - or quorum not met
  Defeated : - final state
}

state "Succeeded" as Succeeded {
  Succeeded : Proposal adopted
  Succeeded : - majority achieved
  Succeeded : - quorum reached
  Succeeded : - ready for queue
}

Succeeded --> Queued : queue() called

state "Queued" as Queued {
  Queued : Scheduled in Timelock
  Queued : - 2 days delay
  Queued : - security period
  Queued : - can be cancelled
}

Queued --> Expired : Timelock expires\n(~1 week after delay)
Queued --> Executed : execute() called\nafter delay

state "Expired" as Expired {
  Expired : Proposal timed out
  Expired : - execution window missed
  Expired : - final state
}

state "Executed" as Executed {
  Executed : Successfully executed
  Executed : - changes applied
  Executed : - final state
}

state "Cancelled" as Cancelled {
  Cancelled : Proposal cancelled
  Cancelled : - by admin/governance
  Cancelled : - before execution
  Cancelled : - final state
}

' Cancellation can happen from multiple states
Active --> Cancelled : cancel() by admin
Queued --> Cancelled : cancel() by admin
Succeeded --> Cancelled : cancel() by admin

' Final states
Defeated --> [*]
Executed --> [*] 
Expired --> [*]
Cancelled --> [*]

note right of Active
  **Voting Rules:**
  • FOR votes > AGAINST votes
  • Total votes ≥ quorum (4%)
  • Voting power = token balance
  • at proposal snapshot
end note

note right of Queued
  **Timelock Security:**
  • 2-day minimum delay
  • Prevents rapid execution
  • Allows time for review
  • Community can react
end note

note bottom of Executed
  **Execution Examples:**
  • addProduct(id, name, price, stock)
  • updateProductPrice(id, newPrice) 
  • distributeRevenue(recipients[], amounts[])
  • addStock(id, quantity)
end note

@enduml
